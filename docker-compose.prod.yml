version: '3.8'

services:
  # PostgreSQL データベース（本番用）
  postgres:
    image: postgres:15-alpine
    container_name: railway_maintenance_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-railway_maintenance}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - railway_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js アプリケーション（本番用）
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: railway_maintenance_app_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-railway_maintenance}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - railway_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx リバースプロキシ（本番用）
  nginx:
    image: nginx:alpine
    container_name: railway_maintenance_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - railway_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:

networks:
  railway_network_prod:
    driver: bridge 