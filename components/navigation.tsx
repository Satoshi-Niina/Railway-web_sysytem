"use client"

import { useState, useMemo } from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { Menu, X, ChevronDown } from "lucide-react"

// „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Ç¢„Ç§„ÉÜ„É†„ÅÆÂûãÂÆöÁæ©
interface NavigationItem {
  name: string
  href: string
  icon: any
  description: string
}

// „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Ç¢„Ç§„ÉÜ„É†„ÅÆÂÆöÁæ©
const navigationItems: NavigationItem[] = [
  {
    name: "ÈÅãÁî®Ë®àÁîª",
    href: "/operations",
    icon: "üìã",
    description: "ÈÅãÁî®Ë®àÁîª„Çí‰ΩúÊàê„ÉªÁ∑®ÈõÜ„Åó„Åæ„Åô"
  },
  {
    name: "ÈÅãÁî®ÁÆ°ÁêÜ",
    href: "/management",
    icon: "üìä",
    description: "ÈÅãÁî®Ë®àÁîª„Å®ÂÆüÁ∏æ„ÇíÁµ±ÂêàÁöÑ„Å´Ë°®Á§∫„ÉªÁÆ°ÁêÜ„Åó„Åæ„Åô"
  },
  {
    name: "ÊïÖÈöú„Éª‰øÆÁπï",
    href: "/failures",
    icon: "‚ö†Ô∏è",
    description: "ÊïÖÈöúÊó•„ÉªÂÜÖÂÆπ„Éª‰øÆÁπïÂÜÖÂÆπ„ÉªÁîªÂÉè„ÇíË®òÈå≤„Åó„ÄÅÊïÖÈöúÂØæÂøúÂ±•Ê≠¥„ÇíÁÆ°ÁêÜ"
  },
]

const settingsItems: NavigationItem[] = [
  {
    name: "‰∫ãÊ•≠ÊâÄ„Éû„Çπ„Çø",
    href: "/settings/offices",
    icon: "üè¢",
    description: "‰øùÂÆà‰∫ãÊ•≠ÊâÄ„ÅÆÊÉÖÂ†±ÁÆ°ÁêÜ"
  },
  {
    name: "‰øùÂÆàÂü∫Âú∞„Éû„Çπ„Çø",
    href: "/settings/maintenance-bases",
    icon: "üè¢",
    description: "‰øùÂÆàÂü∫Âú∞„ÅÆÊÉÖÂ†±ÁÆ°ÁêÜ"
  },
  {
    name: "‰øùÂÆàÁî®Ëªä„Éû„Çπ„Çø",
    href: "/vehicles",
    icon: "üöó",
    description: "‰øùÂÆàÁî®Ëªä„ÅÆÁ®ÆÈ°ûÁÆ°ÁêÜ"
  },
  {
    name: "Ê§ú‰øÆÂë®Êúü„Éû„Çπ„Çø",
    href: "/maintenance/cycles",
    icon: "‚öôÔ∏è",
    description: "Ê©üÁ®Æ„Åî„Å®„Å´ÂÆöÊúüÁÇπÊ§ú„Éª‰πôAÊ§úÊüª„ÉªÁî≤Ê§úÊüª„ÉªËá®‰øÆ„ÅÆÂë®Êúü„ÇíË®≠ÂÆö„ÉªÁÆ°ÁêÜ"
  },
]

export default function Navigation() {
  const [isOpen, setIsOpen] = useState(false)
  const pathname = usePathname()

  // „É°„É¢Âåñ„Åï„Çå„Åü„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Ç¢„Ç§„ÉÜ„É†
  const memoizedNavigationItems = useMemo(() => navigationItems, [])
  const memoizedSettingsItems = useMemo(() => settingsItems, [])

  // ÁèæÂú®„ÅÆ„Éë„Çπ„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö„Åô„ÇãÈñ¢Êï∞
  const isActive = (href: string) => {
    if (href === "/") {
      return pathname === "/"
    }
    return pathname.startsWith(href)
  }

  return (
    <nav className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          {/* „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
          <div className="hidden md:flex items-center space-x-8">
            {memoizedNavigationItems.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className={cn(
                  "flex items-center space-x-2 px-3 py-2 rounded-md text-base font-medium transition-colors",
                  isActive(item.href)
                    ? item.name === "ÈÅãÁî®ÁÆ°ÁêÜ" 
                      ? "bg-blue-100 text-blue-700 border-2 border-blue-300 rounded-full"
                      : "bg-blue-100 text-blue-700"
                    : "text-gray-700 hover:text-blue-600 hover:bg-gray-50"
                )}
              >
                <span>{item.icon}</span>
                <span>{item.name}</span>
              </Link>
            ))}
            
            {/* Ë®≠ÂÆö„Éâ„É≠„ÉÉ„Éó„ÉÄ„Ç¶„É≥ */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  variant="ghost"
                  className="flex items-center space-x-2 px-3 py-2 text-base font-medium text-gray-700 hover:text-blue-600 hover:bg-gray-50"
                >
                  <span>‚öôÔ∏è</span>
                  <span>Ë®≠ÂÆö</span>
                  <ChevronDown className="w-4 h-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                {memoizedSettingsItems.map((item) => (
                  <DropdownMenuItem key={item.name} asChild>
                    <Link
                      href={item.href}
                      className="flex items-center space-x-2 px-3 py-2 text-sm"
                    >
                      <span>{item.icon}</span>
                      <div>
                        <div className="font-medium">{item.name}</div>
                        <div className="text-xs text-gray-500">{item.description}</div>
                      </div>
                    </Link>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          {/* „É¢„Éê„Ç§„É´„É°„Éã„É•„Éº„Éú„Çø„É≥ */}
          <div className="md:hidden flex items-center">
            <Sheet open={isOpen} onOpenChange={setIsOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="sm">
                  <Menu className="w-5 h-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side="left" className="w-80">
                <div className="flex flex-col space-y-4 mt-8">
                  {memoizedNavigationItems.map((item) => (
                    <Link
                      key={item.name}
                      href={item.href}
                      onClick={() => setIsOpen(false)}
                      className={cn(
                        "flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors",
                        isActive(item.href)
                          ? "bg-blue-100 text-blue-700"
                          : "text-gray-700 hover:text-blue-600 hover:bg-gray-50"
                      )}
                    >
                      <span className="text-lg">{item.icon}</span>
                      <div>
                        <div className="font-medium">{item.name}</div>
                        <div className="text-xs text-gray-500">{item.description}</div>
                      </div>
                    </Link>
                  ))}
                  
                  <div className="border-t pt-4">
                    <div className="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">
                      Ë®≠ÂÆö
                    </div>
                    {memoizedSettingsItems.map((item) => (
                      <Link
                        key={item.name}
                        href={item.href}
                        onClick={() => setIsOpen(false)}
                        className={cn(
                          "flex items-center space-x-3 px-3 py-2 rounded-md text-sm font-medium transition-colors",
                          isActive(item.href)
                            ? "bg-blue-100 text-blue-700"
                            : "text-gray-700 hover:text-blue-600 hover:bg-gray-50"
                        )}
                      >
                        <span className="text-lg">{item.icon}</span>
                        <div>
                          <div className="font-medium">{item.name}</div>
                          <div className="text-xs text-gray-500">{item.description}</div>
                        </div>
                      </Link>
                    ))}
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>
    </nav>
  )
}
